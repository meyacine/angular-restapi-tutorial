<?php
namespace Api\Repository;
use Api\Model\Fournisseurs;
use Api\Common\DbConnector;
class FournisseursRepository implements Repository{
    private $dbConnector;
    public function __construct (){
        //TODO: Autogenerated stub. You can do something like $dbConnector = DbConnector::getInstance();
        $this->dbConnector = DbConnector::getInstance();
    }
    public function findAll(){
        $stmt = $this->dbConnector->pdo->prepare('SELECT id, nom, adresse FROM fournisseurs');
        $stmt->execute();
        $stmt->setFetchMode(\PDO::FETCH_ASSOC);
        $result = $stmt->fetchAll();
        return $result;
    }
    public function findOne($id=0){
        $stmt = $this->dbConnector->pdo->prepare('SELECT id, nom, adresse FROM fournisseurs  WHERE id = :id');
         $stmt->bindParam(':id', $id, \PDO::PARAM_INT);
        $stmt->execute();
        $stmt->setFetchMode(\PDO::FETCH_ASSOC);
        $result = $stmt->fetch();
        return $result;
    }
    public function save($object=[]){
        $stmt = $this->dbConnector->pdo->prepare('INSERT INTO fournisseurs(`nom`, `adresse`)  VALUES (:nom, :adresse)');
        $stmt->bindParam('nom', $object->nom, \PDO::PARAM_STR);
        $stmt->bindParam('adresse', $object->adresse, \PDO::PARAM_STR);
        $stmt->execute();
        return $this->dbConnector->pdo->lastInsertId();
    }
    public function update($object=[]){
        $stmt = $this->dbConnector->pdo->prepare('UPDATE fournisseurs SET  nom = :nom,  adresse = :adresse WHERE id = :id');
         $stmt->bindParam(':id', $object->id, \PDO::PARAM_INT);
        $stmt->bindParam('nom', $object->nom, \PDO::PARAM_STR);
        $stmt->bindParam('adresse', $object->adresse, \PDO::PARAM_STR);
        $stmt->execute();
        return $stmt->rowCount();
    }
    public function delete($id=0){
        $stmt = $this->dbConnector->pdo->prepare('DELETE FROM fournisseurs  WHERE id = :id');
         $stmt->bindParam(':id', $id, \PDO::PARAM_INT);
        $stmt->execute();
        return $stmt->rowCount();
    }
}
