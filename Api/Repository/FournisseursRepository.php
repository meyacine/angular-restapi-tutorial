<?php
namespace Api\Repository;
use Api\Common\RepositoryException;
use Api\Model\Fournisseurs;
use Api\Common\DbConnector;
class FournisseursRepository extends RepositoryException implements Repository{
    private $dbConnector;
    public function __construct (){
        parent::__construct();
        //TODO: Autogenerated stub. You can do something like $dbConnector = DbConnector::getInstance();
        $this->dbConnector = DbConnector::getInstance();
    }
    public function findAll(){
        try {
            $stmt = $this->dbConnector->pdo->prepare('SELECT id, nom, adresse FROM fournisseurs');
            $stmt->execute();
            $stmt->setFetchMode(\PDO::FETCH_ASSOC);
            $result = $stmt->fetchAll();
            return $result;
        } catch (Exception $e) {
            return [];
        }
    }
    public function findOne($id=0){
        try {
            $stmt = $this->dbConnector->pdo->prepare('SELECT id, nom, adresse FROM fournisseurs  WHERE id = :id');
            $stmt->bindParam(':id', $id, \PDO::PARAM_INT);
            $stmt->execute();
            $stmt->setFetchMode(\PDO::FETCH_ASSOC);
            $result = $stmt->fetch();
            return $result;
        } catch (Exception $e) {
            return [];
        }
    }
    public function save($object=[]){
        try{
            $stmt = $this->dbConnector->pdo->prepare('INSERT INTO fournisseurs(`nom`, `adresse`)  VALUES (:nom, :adresse)');
            $stmt->bindParam('nom', $object->nom, \PDO::PARAM_STR);
            $stmt->bindParam('adresse', $object->adresse, \PDO::PARAM_STR);
            $stmt->execute();
            return $this->dbConnector->pdo->lastInsertId();
        } catch (\Error $e){
            return 0;
        }
    }
    public function update($object=[]){
        try {
            $stmt = $this->dbConnector->pdo->prepare('UPDATE fournisseurs SET  nom = :nom,  adresse = :adresse WHERE id = :id');
            $stmt->bindParam(':id', $object->id, \PDO::PARAM_INT);
            $stmt->bindParam('nom', $object->nom, \PDO::PARAM_STR);
            $stmt->bindParam('adresse', $object->adresse, \PDO::PARAM_STR);
            $stmt->execute();
            return $stmt->rowCount();
        } catch (Exception $e) {
            return 0;
        }
    }
    public function delete($id=0){
        try {
            $stmt = $this->dbConnector->pdo->prepare('DELETE FROM fournisseurs  WHERE id = :id');
            $stmt->bindParam(':id', $id, \PDO::PARAM_INT);
            $stmt->execute();
            return $stmt->rowCount();
        } catch (Exception $e) {
            return 0;
        }
    }

}
